# Pipeline
apiVersion: v1
kind: BuildConfig
metadata:
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: tasks-pipeline
spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
             stage ('Build') {
               git branch: 'master', url: 'https://github.com/adriancuria/openshift-demo-app.git'
               sh "mvn clean install -DskipTests=true"
             }

             stage ('Test') {
               sh "mvn test"
             }
            
             stage ('Analysis (Security, Bugs, etc)') {
               sh "mvn site -DskipTests=true"
              
               step([$class: 'CheckStylePublisher', unstableTotalAll:'300'])
               step([$class: 'PmdPublisher', unstableTotalAll:'20'])
               step([$class: 'FindBugsPublisher', pattern: '**/findbugsXml.xml', unstableTotalAll:'20'])
               step([$class: 'JacocoPublisher'])
               publishHTML (target: [keepAll: true, reportDir: 'target/site', reportFiles: 'project-info.html', reportName: "Site Report"])
             }

             stage ('Push to Nexus') {
               sh "mvn deploy -DskipTests=true"
             }

             stage ('Deploy DEV') {
               sh "rm -rf oc-build && mkdir -p oc-build/deployments"
               sh "cp target/openshift-demo-app-0.0.1-SNAPSHOT.jar oc-build/deployments/ROOT.jar"
               // clean up. keep the image stream
               sh "oc delete bc,dc,svc,route -l app=tasks -n ${DEV_PROJECT}"
               // create build. override the exit code since it complains about exising imagestream
               sh "oc new-build --name=tasks --image-stream=jboss-eap70-openshift:1.5 --binary=true --labels=app=tasks -n ${DEV_PROJECT} || true"
               // build image
               sh "oc start-build tasks --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
               // deploy image
               sh "oc new-app tasks:latest -n ${DEV_PROJECT}"
               sh "oc expose svc/tasks -n ${DEV_PROJECT}"
             }
            }
          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline